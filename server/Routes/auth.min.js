const express=require("express"),bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken"),db=require("../database/model"),authRouter=express.Router(),SECRET=process.env.SECRET||"your_secret_key";authRouter.post("/register",(async(req,res)=>{const{username:username,password:password}=req.body,hashedPassword=await bcrypt.hash(password,10);try{const result=db.prepare("INSERT INTO users (username, password) VALUES (?, ?) RETURNING id, username").get(username,hashedPassword),useId=result.id,newUsename=result.username,accessToken=createToken({res:res,id:useId,username:newUsename});res.json({id:useId,username:newUsename,token:accessToken})}catch(err){return console.error("Register user error",err),res.status(400).json({message:"Username already taken"})}})),authRouter.post("/login",(async(req,res)=>{const{username:username,password:password}=req.body;try{const user=db.prepare("SELECT id, username, password FROM users WHERE username = ?").get(username);if(!user||!await bcrypt.compare(password,user.password))return res.status(401).json({message:"Invalid credentials"});const useId=user.id,newUsename=user.username,accessToken=createToken({res:res,id:useId,username:newUsename});res.json({id:useId,username:newUsename,token:accessToken})}catch(err){return console.error("Login user error",err),res.status(400).json({message:"Invalid username/password"})}})),authRouter.post("/logout",((req,res)=>{res.clearCookie("accessToken"),res.json({message:"Logged out successfully"})})),authRouter.post("/refresh",((req,res)=>{const refreshToken=req.cookies.refreshToken;if(!refreshToken)return res.status(401).json({message:"No refresh token"});jwt.verify(refreshToken,SECRET,((err,user)=>{if(err)return res.status(403).json({message:"Invalid refresh token"});const newAccessToken=jwt.sign({id:user.id,username:user.username},SECRET,{expiresIn:"15m"});res.cookie("accessToken",newAccessToken,{httpOnly:!0,secure:"production"===process.env.NODE_ENV,sameSite:"Strict",maxAge:9e5}),res.json({message:"Access token refreshed"})}))}));const authenticate=(req,res,next)=>{const token=req.cookies.accessToken;if(!token)return res.status(401).json({message:"Access token expired, please refresh"});jwt.verify(token,SECRET,((err,user)=>{if(err)return res.status(403).json({message:"Invalid access token"});req.user=user,next()}))},createToken=({res:res,id:id,username:username})=>{const accessToken=jwt.sign({id:id,username:username},SECRET,{expiresIn:"15m"}),refreshToken=jwt.sign({id:id,username:username},SECRET,{expiresIn:"7d"});return res.cookie("accessToken",accessToken,{httpOnly:!0,secure:"production"===process.env.NODE_ENV,sameSite:"Strict",maxAge:9e5}),res.cookie("refreshToken",refreshToken,{httpOnly:!0,secure:"production"===process.env.NODE_ENV,sameSite:"Strict",maxAge:6048e5}),accessToken};module.exports={authRouter:authRouter,authenticate:authenticate,createToken:createToken};